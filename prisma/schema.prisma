// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model AcademicSemester {
  id String @id @default(uuid())
  year String
  title String
  code String
  startMonth String
  endMonth String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  students Student[]
  semesterRegistrations SemesterRegistration[]

  @@map("academic_semesters")
}

model AcademicFaculty {
  id String @id @default(uuid())
  title String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  academicDepartments AcademicDepartment[]
  students Student[]
  faculties Faculty[]

  @@map("academic_faculties")
}

model AcademicDepartment {
  id String @id @default(uuid())
  title String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  students Student[]
  faculties Faculty[]
  offeredCourses    OfferedCourse[]
  academicFacultyId String
  academicFaculty AcademicFaculty @relation(fields: [academicFacultyId], references: [id], onDelete: Cascade)

  @@map("academic_departments")
}

model Student {
  id String @id @default(uuid())
  studentId String
  firstName String
  lastName String
  middleName String
  profileImage String
  email String
  contactNo String
  gender String
  bloodGroup String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  academicDepartmentId String
  academicFacultyId String
  academicSemesterId String
  academicDepartment AcademicDepartment @relation(fields: [academicDepartmentId], references: [id], onDelete: Cascade)
  academicFaculty AcademicFaculty @relation(fields: [academicFacultyId], references: [id], onDelete: Cascade)
  academicSemester AcademicSemester @relation(fields: [academicSemesterId], references: [id], onDelete: Cascade)

  @@map("students")
}

model Faculty {
  id String @id @default(uuid())
  facultyId String
  firstName String
  lastName String
  middleName String
  profileImage String
  email String
  contactNo String
  gender String
  bloodGroup String
  designation String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  academicDepartmentId String
  academicFacultyId String
  academicDepartment AcademicDepartment @relation(fields: [academicDepartmentId], references: [id], onDelete: Cascade)
  academicFaculty AcademicFaculty @relation(fields: [academicFacultyId], references: [id], onDelete: Cascade)
  courses CourseFaculty[]
  @@map("faculties")
}

model Building {
  id String @id @default(uuid())
  title String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  rooms Room[]
  
  @@map("building")
}

model Room {
  id String @id @default(uuid())
  roomNumber String
  floor String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  buildingId String
  building Building @relation(fields: [buildingId], references: [id])
  
  @@map("rooms")
}

model Course {
  id String @id @default(uuid())
  title String
  code String
  credits Int
  createdAt DateTime @default(now())
  UpdatedAt DateTime @updatedAt
  faculties CourseFaculty[]
  offeredCourses  OfferedCourse[]
  preRequisite CourseToPrerequisite[] @relation("CourseToPrerequisite")
  preRequisiteFor CourseToPrerequisite[] @relation("prerequisiteToCourse")

  @@map("courses")
}

model CourseToPrerequisite {
  courseId String
  preRequisiteId String
  @@id([courseId, preRequisiteId])

  course Course @relation(fields: [courseId], references: [id], name: "CourseToPrerequisite")
  preRequisite Course @relation(fields: [preRequisiteId], references: [id], name: "prerequisiteToCourse")

  @@map("courseToPrerequisites")
}

model CourseFaculty {
  courseId String
  course   Course @relation(fields: [courseId], references: [id])

  facultyId String
  faculty   Faculty @relation(fields: [facultyId], references: [id])

  @@id([courseId, facultyId])
  @@map("course_faculties")
}

model SemesterRegistration {
  id                 String                      @id @default(uuid())
  startDate          DateTime
  endDate            DateTime
  status             SemesterRegistrationStatus? @default(UPCOMING)
  minCredit          Int                         @default(0)
  maxCredit          Int                         @default(0)
  createdAt          DateTime                    @default(now())
  updatedAt          DateTime                    @updatedAt
  academicSemesterId String
  academicSemester   AcademicSemester            @relation(fields: [academicSemesterId], references: [id])
  offeredCourses        OfferedCourse[]
  offeredCourseSections  OfferedCourseSection[]
  
  @@map("semester_registrations")
}

enum SemesterRegistrationStatus {
  UPCOMING
  ONGOING
  ENDED
}

model OfferedCourse {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  courseId  String
  course    Course   @relation(fields: [courseId], references: [id])

  academicDepartmentId String
  academicDepartment   AcademicDepartment @relation(fields: [academicDepartmentId], references: [id])

  semesterRegistrationId String
  semesterRegistration   SemesterRegistration   @relation(fields: [semesterRegistrationId], references: [id])

  offeredCourseSections  OfferedCourseSection[]

  @@map("offered_courses")
}

model OfferedCourseSection {
  id                       String        @id @default(uuid())
  title                    String
  maxCapacity              Int
  currentlyEnrolledStudent Int           @default(0)
  createdAt                DateTime      @default(now())
  updatedAt                DateTime      @updatedAt
  offeredCourseId          String
  offeredCourse            OfferedCourse @relation(fields: [offeredCourseId], references: [id])

  semesterRegistrationId String
  semesterRegistration   SemesterRegistration @relation(fields: [semesterRegistrationId], references: [id])

  @@map("offered_course_sections")
}